<?php

namespace Sbehnfeldt\Webapp;

use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Psr\Log\LoggerAwareInterface;
use Monolog\Handler\StreamHandler;
use Monolog\Logger;
use Sbehnfeldt\Webapp\PropelDbEngine\UserQuery;
use Slim\App;
use Sbehnfeldt\Webapp\PropelDbEngine\User;


/**
 * Class ApiApp
 * @package Sbehnfeldt\Webapp
 *
 * Slim App-derived class for handling the Webapp API
 */
class ApiApp extends App
{
    /** @var LoggerAwareInterface */
    private $logger;

    public function __construct($container = [])
    {
        parent::__construct($container);
        $this->logger = null;
    }

    /**
     * @return LoggerAwareInterface
     */
    public function getLogger(): ?LoggerAwareInterface
    {
        if (!$this->logger) {
            if ($this->getContainer()->has('logger')) {
                $this->logger = $this->getContainer()->get('logger');
            }
            if (!$this->logger) {
                // If no logger is specified in the dependency container,
                // use a Monolog logger by default.
                if ($this->getContainer()->get('settings')->has('monolog')) {
                    // Check config file for settings for monolog
                    $cfg = $this->getContainer()->get('settings')->get('monolog');
                } else {
                    $cfg = [
                        'directory' => '.',
                        'filename' => 'api.log',
                        'channel' => 'default'
                    ];
                }
                $handler = new StreamHandler(implode(DIRECTORY_SEPARATOR, ['..', $cfg['directory'], $cfg['filename']]));
                $this->logger = new Logger($cfg['channel']);
                $this->logger->pushHandler($handler);
            }
        }
        return $this->logger;
    }

    /**
     * @param LoggerAwareInterface $logger
     */
    public function setLogger(?LoggerAwareInterface $logger): void
    {
        $this->logger = $logger;
    }


    public function run($silent = false)
    {
        $api = $this;

        $this->get('/api/', function (Request $req, Response $resp, array $args) use ($api) {
            $resp->getBody()->write('ok');
            return $resp;
        });


        // Get all users
        $this->get('/api/users', function (Request $req, Response $resp, array $args) use ($api) {
            $users = UserQuery::create()->find();
            $users = $users->toArray();
            $users = json_encode($users);
            $resp->getBody()->write($users);
            return $resp;
        });

        // Create new user
        $this->post('/api/users', function (Request $req, Response $resp, array $args) use ($api) {
            $user = new User();
            $user->setUsername($_POST[ 'Username']);
            $user->setEmail($_POST[ 'Email' ]);
            $user->setPassword( password_hash('password', PASSWORD_DEFAULT ));
            $b = $user->save();
            $user = $user->toArray();
            $user = json_encode($user);

            $resp = $resp->withStatus(201, 'Created');
            $resp = $resp->withHeader('Content-Type', 'application/json');
            $resp->getBody()->write( $user);
            return $resp;
        });


        return parent::run($silent); // TODO: Change the autogenerated stub
    }
}
